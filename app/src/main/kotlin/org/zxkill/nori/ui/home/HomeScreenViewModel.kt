package org.zxkill.nori.ui.home

import android.app.Application
import androidx.compose.material3.SnackbarHostState
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.Job
import kotlinx.coroutines.flow.filter
import kotlinx.coroutines.launch
import org.nori.skill.context.SkillContext
import org.zxkill.nori.di.SkillContextInternal
import org.zxkill.nori.di.SpeechOutputDeviceWrapper
import org.zxkill.nori.di.SttInputDeviceWrapper
import org.zxkill.nori.di.WakeDeviceWrapper
import org.zxkill.nori.eval.AutoSkillRunner
import org.zxkill.nori.eval.SkillEvaluator
import org.zxkill.nori.eval.SkillHandler
import org.zxkill.nori.io.input.SttState
import org.zxkill.nori.io.speech.SnackbarSpeechDevice
import javax.inject.Inject

/**
 * ViewModel главного экрана. Хранит ссылки на все устройства ввода/вывода,
 * управляет их состоянием и предоставляет данные для UI.
 */
@HiltViewModel
class HomeScreenViewModel @Inject constructor(
    application: Application,
    val skillContext: SkillContextInternal,
      val skillHandler: SkillHandler,
      // Сервис, который выполняет авто-скиллы и отдаёт их результаты
      autoSkillRunner: AutoSkillRunner,
    val sttInputDevice: SttInputDeviceWrapper,
    val speechOutputDevice: SpeechOutputDeviceWrapper,
    val wakeDevice: WakeDeviceWrapper,
    val skillEvaluator: SkillEvaluator,
    // this is always instantiated, but will do nothing if
    // it is not the speech device chosen by the user
    snackbarSpeechDevice: SnackbarSpeechDevice,
  ) : AndroidViewModel(application) {

    private var showSnackbarJob: Job? = null
      val snackbarHostState = SnackbarHostState()

      // Поток с последними выводами всех авто-скиллов
      val autoSkillOutputs = autoSkillRunner.outputs

    init {
        // show snackbars generated by the SnackbarSpeechDevice
        viewModelScope.launch {
            snackbarSpeechDevice.events.collect {
                if (it == null) {
                    // "stop speaking", i.e. remove the current snackbar
                    showSnackbarJob?.cancel()
                } else {
                    // replace the current snackbar
                    showSnackbarJob?.cancel()
                    showSnackbarJob = launch {
                        snackbarHostState.showSnackbar(it)
                    }
                }
            }
        }

        // stop speaking when the STT device starts listening
        viewModelScope.launch {
            sttInputDevice.uiState
                .filter { it == SttState.Listening }
                .collect { speechOutputDevice.stopSpeaking() }
        }
    }

    fun disableWakeWord() {
        // Wake word method setting removed; nothing to disable.
    }
}
